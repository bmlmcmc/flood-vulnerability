import pandas as pd
import folium
import os
import json
from geopy.geocoders import Nominatim, GoogleV3
import argparse


def getAll(dd, tahun):
    idx = len(dd)
    for n in nama_kelurahan:
        if n not in [loc for loc in dd['lokasi']]:
            dd.loc[idx] = [tahun, n, 0]
            idx += 1
    return dd.reset_index().iloc[:, 1:]


with open('../Data/json/kelurahan_jakarta.json') as f:
    dataa = json.load(f)

nama_kelurahan = [dt['properties']['KEL_NAME'] for dt in dataa['features']]
data_ekstraksi = pd.read_csv("../Data/data/Data Gabungan Bersih.csv",
                             index_col=0).drop_duplicates().reset_index().iloc[:, 1:]

# Mendapatkan koordinat longitude dan lattitude
locator = Nominatim(user_agent="myGeocoder")
alamat = []
lokasi = []
longlat = []
no = -1


def getkeyword(desa, kec):
    if desa.__contains__("("):
        key1 = [d.replace(")", "") for d in desa.split(" (")]
    else:
        key1 = [desa]
    if kec.__contains__("("):
        key2 = [d.replace(")", "") for d in kec.split(" (")]
    else:
        key2 = [kec]
    keyword = [des+", "+kecmtn for des in key1 for kecmtn in key2]
    return keyword


for idx, row in data_ekstraksi.lokasi.drop_duplicates().to_frame().reset_index().iterrows():
    if row['lokasi'] != "Jakarta":
        keyword = getkeyword(row['lokasi'], "Jakarta")
        for k in keyword:
            location = locator.geocode(k)
            # no+=1
            print(location, "|", k)
            if location:
                alamat.append(location[0])
                longlat.append(location[1])
                lokasi.append(row['lokasi'])

df = pd.DataFrame({"lokasi": lokasi, "alamat": alamat, "longlat": longlat})
df

fix = data_ekstraksi.merge(df, on="lokasi")

# Get data ekstraksi lokasi tahunan
ekstraksi_with_year = fix[['tanggal', 'lokasi', 'Kabupaten']]
ekstraksi_with_year['tanggal'] = pd.to_datetime(
    ekstraksi_with_year['tanggal'], format="%Y-%m-%d")
ekstraksi_with_year['tanggal'] = ekstraksi_with_year['tanggal'].dt.year
latlang = fix[['Desa', 'lat', 'long']
              ].drop_duplicates().reset_index().iloc[:, 1:]
latlang['Desa'] = latlang['Desa'].str.upper()

e = ekstraksi_with_year.groupby(['tanggal', 'lokasi'])[
    'Kabupaten'].count().reset_index()

geo_path = "../Data/json/kelurahan_jakarta.json"


tahun = [2017, 2018, 2019, 2020]

for t in tahun:
    d = e[e['tanggal'] == t].reset_index().iloc[:, 1:]
    d['lokasi'] = d['lokasi'].str.upper()
    m = folium.Map(location=[-6.1949571, 106.8230631],
                   tiles="cartodbpositron", zoom_start=13)

    tiles = ['stamenwatercolor', 'cartodbpositron',
             'openstreetmap', 'stamenterrain']
    for tile in tiles:
        folium.TileLayer(tile).add_to(m)

    choropleth = folium.Choropleth(
        geo_data=geo_path,
        name='choropleth',
        data=getAll(d, t),
        columns=['lokasi', 'Kabupaten'],
        key_on='feature.properties.KEL_NAME',
        fill_color='YlGn',
        fill_opacity=0.7,
        line_opacity=0.2,
        # Voter Proportion (%) in 2020,
        legend_name=f'Banyaknya Kejadian Banjir Tahun {t}',
        threshold_scale=[0, 1, 4, 8, 12, 16, 20, 24, 28],
        highlight=True
    ).add_to(m)

    folium.LayerControl().add_to(m)
    # Display Region Label
    choropleth.geojson.add_child(
        folium.features.GeoJsonTooltip(['KEL_NAME'], labels=True)
    )
    choropleth.geojson.add_child(
        folium.GeoJson("../Data/json/kali_jakarta.geojson",
                       name='Kali di Jakarta')
    )

    m.save(f"{t}.html")
    print("Selesai!")
